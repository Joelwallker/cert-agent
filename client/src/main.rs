use tonic::Request;
use std::collections::HashMap;

mod cert_agent {
    tonic::include_proto!("cert_agent");
}

use cert_agent::{
    cert_agent_client::CertAgentClient,
    *,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut client = CertAgentClient::connect("http://localhost:50051").await?;
    
    println!("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ cert-agent —Å–µ—Ä–≤–∏—Å—É!");
    
    // –¢–µ—Å—Ç 1: –í—ã–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    println!("\nüìã –¢–µ—Å—Ç 1: –í—ã–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
    let issue_request = Request::new(IssueCertificateRequest {
        common_name: "test.example.com".to_string(),
        dns_names: vec![
            "test.example.com".to_string(),
            "*.test.example.com".to_string(),
        ],
        ip_addresses: vec!["127.0.0.1".to_string()],
        validity_days: 365,
        organization: "Test Organization".to_string(),
        organizational_unit: "IT Department".to_string(),
        country: "US".to_string(),
        state: "California".to_string(),
        locality: "San Francisco".to_string(),
        metadata: HashMap::new(),
    });
    
    match client.issue_certificate(issue_request).await {
        Ok(response) => {
            let cert = response.into_inner();
            println!("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø—É—â–µ–Ω!");
            println!("   ID: {}", cert.certificate_id);
            println!("   –°—Ç–∞—Ç—É—Å: {:?}", cert.status);
            println!("   –ò—Å—Ç–µ–∫–∞–µ—Ç: {}", chrono::DateTime::from_timestamp(cert.expires_at, 0)
                .unwrap_or_default().format("%Y-%m-%d %H:%M:%S UTC"));
            
            // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            println!("\nüìä –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
            let status_request = Request::new(GetCertificateStatusRequest {
                certificate_id: cert.certificate_id.clone(),
            });
            
            match client.get_certificate_status(status_request).await {
                Ok(status_response) => {
                    let status = status_response.into_inner();
                    println!("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω!");
                    println!("   CN: {}", status.common_name);
                    println!("   DNS Names: {:?}", status.dns_names);
                    println!("   –°—Ç–∞—Ç—É—Å: {:?}", status.status);
                }
                Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {}", e),
            }
            
            // –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            println!("\nüìú –¢–µ—Å—Ç 3: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤");
            let list_request = Request::new(ListCertificatesRequest {
                status: 0, // Unspecified - –≤—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                page_size: 10,
                page_token: String::new(),
            });
            
            match client.list_certificates(list_request).await {
                Ok(list_response) => {
                    let list = list_response.into_inner();
                    println!("‚úÖ –ù–∞–π–¥–µ–Ω–æ {} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", list.certificates.len());
                    for cert_info in list.certificates {
                        println!("   - {} (CN: {}, –°—Ç–∞—Ç—É—Å: {:?})", 
                                cert_info.certificate_id, 
                                cert_info.common_name,
                                cert_info.status);
                    }
                }
                Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {}", e),
            }
            
            // –¢–µ—Å—Ç 4: –û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            println!("\nüóëÔ∏è –¢–µ—Å—Ç 4: –û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
            let revoke_request = Request::new(RevokeCertificateRequest {
                certificate_id: cert.certificate_id.clone(),
                reason: "Test revocation".to_string(),
            });
            
            match client.revoke_certificate(revoke_request).await {
                Ok(revoke_response) => {
                    let revoke = revoke_response.into_inner();
                    if revoke.success {
                        println!("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω!");
                    } else {
                        println!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {}", revoke.message);
                    }
                }
                Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞: {}", e),
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø—É—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {}", e);
        }
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    println!("\nüîó –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis");
    println!("   Redis –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 6380");
    println!("   –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...");
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    println!("\nüîç –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
    let fake_request = Request::new(GetCertificateStatusRequest {
        certificate_id: "non-existent-id".to_string(),
    });
    
    match client.get_certificate_status(fake_request).await {
        Ok(_) => println!("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –Ω–∞–π–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"),
        Err(e) => {
            if e.code() == tonic::Code::NotFound {
                println!("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ '–Ω–µ –Ω–∞–π–¥–µ–Ω'");
            } else {
                println!("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e);
            }
        }
    }
    
    println!("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
    Ok(())
}
